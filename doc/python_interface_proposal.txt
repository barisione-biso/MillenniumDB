Importante:
 - labels, keys, nombres de nodos se deben checkear según expresión regular
   por la librería re. Debe ser fácil de cambiar la expresión regular por
   si en el furuto cambia.

 - Ver como manejar caracteres escapados '\n', '\b' '\t', '\r', \u0123 para values
    - unicode como \u0123 quedan igual.
    - ojo con '\' sueltos.
    - ¿simplificar "\/" => '/' ?

 - Para wikidata el type de una conexión es siempre 1, pero para otras BD puede ser 0 o varios.

 - Wikidata no va a caber en memoria. La idea es ir escribiendo a disco cuando los objetos
   salgan de scope y liberando memoria.
    - Si no pueden detectar automaticamente cuando se sale de scope pueden agregar un close() o similar
      a la interfaz

- Da lo mismo si un nodo se define 2 veces
__________________________________

import milleniumdb as mdb

with mdb.graph("graph.txt") as graph:
    for i in range (10):
        n1 = graph.define_node("Q1")
        n1.add_property("lastrevid", 195301613)
        n1.add_label("Item")
        n1.add_property("modified", "2015-02-10T12:42:02Z")

        claim1 = n1.add_connection("Q2")
        claim1.add_type("P1")
        claim1.add_property("type", "claim")
        claim1.add_property("snaktype", "value")

        anon1 = graph.new_anon()
        anon1.add_label("Time")
        anon1.add_property("time", "+2001-12-31T00:00:00Z")
        anon1.add_property("timezone", 0)
        anon1.add_property("precision", 11)
        anon1.add_property("calendarmodel", "http://www.wikidata.org/entity/Q1985727", escaped=False)
        # escaped para sacar ambiguedad de cosas como "\\"
        # escaped False "\\" son 2 back slash
        # escaped True "\\" es 1 back slash

        qualifier1 = claim1.add_connection(anon1)
        qualifier1.add_type("P2")
        qualifier1.add_property("type", "qualifier")

        anon2 = graph.new_anon()
        anon2.add_label("Time")
        anon2.add_property("time", "+2001-12-31T00:00:00Z")

        qualifier2 = claim1.add_connection(anon2)
        qualifier2.add_type("P3")
        qualifier1.add_property("type", "qualifier")

        claim2 = n1.add_connection("Q3")
        claim2.add_type("P4")
        claim2.add_property("type", "claim")


__________________________________
Expected output (graph.txt):

Q1 :Item "lastrevid":195301613 "modified":"2015-02-10T12:42:02Z"
Q1->Q2 :P1 "type":"claim" "snaktype":"value"
@->_1 :P2 "type":"qualifier"
@->_2 :P3 "type":"qualifier"
_1 :Time "time":"+2001-12-31T00:00:00Z" "timezone":0 "precision":11 "calendarmodel":"http://www.wikidata.org/entity/Q1985727"
_2 :String "value":SomePicture.jpg"
Q1->Q3 :P4 "type":"claim"
__________________________________
Otra posibilidad:

Q1 :Item "lastrevid":195301613 "modified":"2015-02-10T12:42:02Z"
@->Q2 :P1 "type":"claim" "snaktype":"value"
@@->_1 :P2 "type":"qualifier"
@@->_2 :P3 "type":"qualifier"
@->Q3 :P4 "type":"claim"
_1 :Time "time":"+2001-12-31T00:00:00Z" "timezone":0 "precision":11 "calendarmodel":"http://www.wikidata.org/entity/Q1985727"
_2 :String "value":SomePicture.jpg"
