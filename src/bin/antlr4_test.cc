#include <chrono>
#include <iostream>
#include <string_view>

#include "antlr4-runtime.h"

#include "parser/query/grammar/autogenerated/MDBLexer.h"
#include "parser/query/grammar/autogenerated/MDBParser.h"
#include "parser/query/grammar/query_visitor.h"

using namespace std;
using namespace antlr4;

int main(int /*argc*/, const char* argv[]) {
    // {
    //     std::string str = "MATCH (?x)->(?y)<=[:P1*]=(Hola)";
    //     auto start = chrono::system_clock::now();

    //     ANTLRInputStream input(str);
    //     MdbLexer lexer(&input);
    //     CommonTokenStream tokens(&lexer);
    //     MdbParser parser(&tokens);

    //     parser.getInterpreter<atn::ParserATNSimulator>()->setPredictionMode(atn::PredictionMode::SLL);

    //     // MdbParser::
    //     // auto a = parser.f
    //     MdbParser::RootContext* tree = parser.root();
    //     MyMdbVisitor visitor;
    //     // Root root = visitor.visitRoot(tree).as<Root>();
    //     auto root = visitor.visitRoot(tree);

    //     // SceneParser::FileContext* tree = parser.file();
    //     // ImageVisitor visitor;
    //     // Scene scene = visitor.visitFile(tree).as<Scene>();
    //     // scene.draw();
    //     auto end = chrono::system_clock::now();
    //     chrono::duration<float, micro> duration = end - start;
    //     cerr << "Total duration: " << duration.count() << " microseconds\n";
    // }

    for (int i = 0; i < 1; i++) {
        std::ifstream input_file;
        input_file.open(argv[1]);
        auto start = chrono::system_clock::now();

        ANTLRInputStream input(input_file);
        MDBLexer lexer(&input);
        CommonTokenStream tokens(&lexer);
        MDBParser parser(&tokens);

        // parser.getInterpreter<atn::ParserATNSimulator>()->setPredictionMode(atn::PredictionMode::SLL);

        // MdbParser::
        // auto a = parser.f
        MDBParser::RootContext* tree = parser.root();
        QueryVisitor visitor;
        // Root root = visitor.visitRoot(tree).as<Root>();
        auto root = visitor.visitRoot(tree);

        // SceneParser::FileContext* tree = parser.file();
        // ImageVisitor visitor;
        // Scene scene = visitor.visitFile(tree).as<Scene>();
        // scene.draw();
        auto end = chrono::system_clock::now();
        chrono::duration<float, micro> duration = end - start;
        cerr << "Total duration: " << duration.count() << " microseconds\n";
    }
    return 0;
}