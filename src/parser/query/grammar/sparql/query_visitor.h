#pragma once

#include <memory>
#include <regex>
#include <vector>
#include <stack>

#include "base/graph_object/datetime.h"
#include "base/query/sparql/decimal.h"
#include "base/query/sparql/sparql_element.h"
#include "base/query/sparql/path.h"
#include "base/query/sparql/path_alternatives.h"
#include "base/query/sparql/path_sequence.h"
#include "base/query/sparql/path_atom.h"
#include "base/query/sparql/path_kleene_star.h"
#include "base/query/sparql/path_optional.h"
#include "base/query/sparql/path_negated_set.h"
#include "parser/query/expr/expr.h"
#include "parser/query/grammar/sparql/autogenerated/SparqlParserBaseVisitor.h"
#include "parser/query/op/op.h"
#include "parser/query/op/sparql/op_path.h"
#include "parser/query/op/sparql/op_select.h"

#include "antlr4-runtime.h"
#include "third_party/robin_hood/robin_hood.h"

namespace SPARQL {

class QueryVisitor : public SparqlParserBaseVisitor {
private:
    std::vector<Var>      select_variables;
    std::vector<OpTriple> current_triples;
    std::vector<OpPath>   current_paths;

    // filter of the current group graph pattern
    std::stack<std::vector<std::unique_ptr<Expr>>> current_filters;

    std::vector<Var>  order_by_items;
    std::vector<bool> order_by_ascending;

    SparqlElement current_sparql_element;
    std::stack<SparqlElement> subject_stack;
    std::stack<SparqlElement> predicate_stack;
    std::stack<SparqlElement> object_stack;

    uint64_t blank_node_counter = 0;

    uint64_t limit  = OpSelect::DEFAULT_LIMIT;
    uint64_t offset = OpSelect::DEFAULT_OFFSET;

    bool current_path_inverse;
    std::unique_ptr<IPath> current_path;

    std::unique_ptr<Expr> current_expr;

    uint64_t     anonymous_path_counter = 0;
    PathSemantic current_path_semantic;
    Var          current_path_variable = Var("");

    std::string base_iri;
    robin_hood::unordered_map<std::string, std::string> prefix_iris_map;

    // Parsing helpers
    std::string iriCtxToString(SparqlParser::IriContext*);
    std::string stringCtxToString(SparqlParser::StringContext*);
public:
    QueryVisitor();

    std::unique_ptr<Op> current_op;
    virtual antlrcpp::Any visitQuery(SparqlParser::QueryContext*) override;

    virtual antlrcpp::Any visitConstructQuery(SparqlParser::ConstructQueryContext*) override;
    virtual antlrcpp::Any visitDescribeQuery(SparqlParser::DescribeQueryContext*) override;
    virtual antlrcpp::Any visitAskQuery(SparqlParser::AskQueryContext*) override;
    virtual antlrcpp::Any visitUpdateCommand(SparqlParser::UpdateCommandContext*) override;
    virtual antlrcpp::Any visitBaseDecl(SparqlParser::BaseDeclContext*) override;
    virtual antlrcpp::Any visitPrefixDecl(SparqlParser::PrefixDeclContext*) override;
    virtual antlrcpp::Any visitSolutionModifier(SparqlParser::SolutionModifierContext*) override;
    virtual antlrcpp::Any visitOrderClause(SparqlParser::OrderClauseContext*) override;

    virtual antlrcpp::Any visitPrimaryExpression(SparqlParser::PrimaryExpressionContext*) override;
    virtual antlrcpp::Any visitUnaryExpression(SparqlParser::UnaryExpressionContext*) override;
    virtual antlrcpp::Any visitMultiplicativeExpression(SparqlParser::MultiplicativeExpressionContext*) override;
    virtual antlrcpp::Any visitAdditiveExpression(SparqlParser::AdditiveExpressionContext*) override;
    virtual antlrcpp::Any visitRelationalExpression(SparqlParser::RelationalExpressionContext*) override;
    virtual antlrcpp::Any visitConditionalAndExpression(SparqlParser::ConditionalAndExpressionContext*) override;
    virtual antlrcpp::Any visitConditionalOrExpression(SparqlParser::ConditionalOrExpressionContext*) override;

    virtual antlrcpp::Any visitAggregate(SparqlParser::AggregateContext*) override;
    virtual antlrcpp::Any visitSubStringExpression(SparqlParser::SubStringExpressionContext*) override;
    virtual antlrcpp::Any visitStrReplaceExpression(SparqlParser::StrReplaceExpressionContext*) override;
    virtual antlrcpp::Any visitRegexExpression(SparqlParser::RegexExpressionContext*) override;
    virtual antlrcpp::Any visitExistsFunction(SparqlParser::ExistsFunctionContext*) override;
    virtual antlrcpp::Any visitNotExistsFunction(SparqlParser::NotExistsFunctionContext*) override;

    virtual antlrcpp::Any visitSelectQuery(SparqlParser::SelectQueryContext*) override;
    virtual antlrcpp::Any visitSelectClause(SparqlParser::SelectClauseContext*) override;
    virtual antlrcpp::Any visitSelectSingleVariable(SparqlParser::SelectSingleVariableContext*) override;
    virtual antlrcpp::Any visitWhereClause(SparqlParser::WhereClauseContext*) override;
    virtual antlrcpp::Any visitGroupGraphPatternSub(SparqlParser::GroupGraphPatternSubContext*) override;
    virtual antlrcpp::Any visitTriplesSameSubjectPath(SparqlParser::TriplesSameSubjectPathContext*) override;
    virtual antlrcpp::Any visitTriplesBlock(SparqlParser::TriplesBlockContext*) override;
    virtual antlrcpp::Any visitPropertyListPathNotEmpty(SparqlParser::PropertyListPathNotEmptyContext*) override;
    virtual antlrcpp::Any visitPropertyListNotEmpty(SparqlParser::PropertyListNotEmptyContext*) override;
    virtual antlrcpp::Any visitObjectPath(SparqlParser::ObjectPathContext*) override;
    virtual antlrcpp::Any visitObject(SparqlParser::ObjectContext*) override;
    virtual antlrcpp::Any visitCollectionPath(SparqlParser::CollectionPathContext*) override;
    virtual antlrcpp::Any visitCollection(SparqlParser::CollectionContext*) override;

    virtual antlrcpp::Any visitVar(SparqlParser::VarContext*) override;
    virtual antlrcpp::Any visitIri(SparqlParser::IriContext*) override;
    virtual antlrcpp::Any visitRdfLiteral(SparqlParser::RdfLiteralContext*) override;
    virtual antlrcpp::Any visitNumericLiteralUnsigned(SparqlParser::NumericLiteralUnsignedContext*) override;
    virtual antlrcpp::Any visitNumericLiteralPositive(SparqlParser::NumericLiteralPositiveContext*) override;
    virtual antlrcpp::Any visitNumericLiteralNegative(SparqlParser::NumericLiteralNegativeContext*) override;
    virtual antlrcpp::Any visitBooleanLiteral(SparqlParser::BooleanLiteralContext*) override;
    virtual antlrcpp::Any visitBlankNode(SparqlParser::BlankNodeContext*) override;
    virtual antlrcpp::Any visitNil(SparqlParser::NilContext*) override;

    virtual antlrcpp::Any visitVerbPath(SparqlParser::VerbPathContext*) override;
    virtual antlrcpp::Any visitVerb(SparqlParser::VerbContext*) override;

    virtual antlrcpp::Any visitPathAlternative(SparqlParser::PathAlternativeContext*) override;
    virtual antlrcpp::Any visitPathSequence(SparqlParser::PathSequenceContext*) override;
    virtual antlrcpp::Any visitPathEltOrInverse(SparqlParser::PathEltOrInverseContext*) override;

    virtual antlrcpp::Any visitGroupOrUnionGraphPattern(SparqlParser::GroupOrUnionGraphPatternContext*) override;
    virtual antlrcpp::Any visitOptionalGraphPattern(SparqlParser::OptionalGraphPatternContext*) override;
    virtual antlrcpp::Any visitMinusGraphPattern(SparqlParser::MinusGraphPatternContext*) override;
    virtual antlrcpp::Any visitServiceGraphPattern(SparqlParser::ServiceGraphPatternContext*) override;
    virtual antlrcpp::Any visitGraphGraphPattern(SparqlParser::GraphGraphPatternContext*) override;

    virtual antlrcpp::Any visitFilter(SparqlParser::FilterContext*) override;
    virtual antlrcpp::Any visitBuiltInCall(SparqlParser::BuiltInCallContext*) override;
    virtual antlrcpp::Any visitFunctionCall(SparqlParser::FunctionCallContext*) override;
};
}
